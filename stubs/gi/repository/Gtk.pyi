from enum import IntEnum
from typing import Protocol

class Widget:
    def show_all(self) -> None: ...

class ListStore:
    def __init__(self, *types: type) -> None: ...

class Container(Widget):
    def get_children(self) -> list[Widget]: ...
    def remove(self, widget: Widget) -> None: ...
    def add(self, widget: Widget) -> None: ...

class Orientation(IntEnum):
    HORIZONTAL = 0
    VERTICAL = 1

class TreeModel(Protocol):
    ...

class Box(Container):
    def __init__(self, orientation: Orientation, spacing: int = ...) -> None: ...
    def pack_start(self, child: Widget, expand: bool, fill: bool, padding: int) -> None: ...

class CellRenderer(object):
    def __init__(self) -> None: ...

class CellRendererText(CellRenderer):
    def __init__(self) -> None: ...

class TreeViewColumn(object):
    def __init__(self, title: str, cell: CellRenderer, **attributes: int) -> None: ...

class TreeView(Widget):
    def __init__(self, model: TreeModel | None = ...) -> None: ...
    def set_model(self, model: TreeModel | None) -> None: ...
    def append_column(self, column: TreeViewColumn) -> int: ...

class PolicyType(IntEnum):
    AUTOMATIC = 0
    ALWAYS = 1
    NEVER = 2
    EXTERNAL = 3

class Bin(Container):
    ...

class ScrolledWindow(Bin):
    def __init__(self) -> None: ...
    def set_policy(self, hpolicy: PolicyType, vpolicy: PolicyType) -> None: ...
    def set_vexpand(self, expand: bool) -> None: ...