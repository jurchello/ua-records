from enum import IntEnum
from typing import Any, Optional, Callable, Protocol

class Widget:
    def show_all(self) -> None: ...
    def add(self, widget: "Widget") -> None: ...
    def set_vexpand(self, expand: bool) -> None: ...
    def set_margin_left(self, v: int) -> None: ...
    def set_margin_right(self, v: int) -> None: ...
    def set_margin_top(self, v: int) -> None: ...
    def set_margin_bottom(self, v: int) -> None: ...
    def set_halign(self, align: int) -> None: ...

class Container(Widget):
    def get_children(self) -> list[Widget]: ...
    def remove(self, widget: Widget) -> None: ...

class Bin(Container):
    ...

class Orientation(IntEnum):
    HORIZONTAL = 0
    VERTICAL = 1

class Align(IntEnum):
    START = 0

class PolicyType(IntEnum):
    AUTOMATIC = 0
    ALWAYS = 1
    NEVER = 2
    EXTERNAL = 3

class Window(Widget):
    def __init__(self, title: Optional[str] = ...) -> None: ...
    def set_default_size(self, width: int, height: int) -> None: ...
    @staticmethod
    def list_toplevels() -> list["Window"]: ...

class Box(Container):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def pack_start(self, child: Widget, expand: bool, fill: bool, padding: int) -> None: ...

class Frame(Container):
    def __init__(self) -> None: ...
    def set_label(self, label: str) -> None: ...

class ScrolledWindow(Bin):
    def __init__(self) -> None: ...
    def set_policy(self, hpolicy: PolicyType, vpolicy: PolicyType) -> None: ...

class Label(Widget):
    def __init__(self) -> None: ...
    def set_text(self, text: str) -> None: ...
    def set_markup(self, markup: str) -> None: ...
    def set_size_request(self, width: int, height: int) -> None: ...

class Entry(Widget):
    def __init__(self) -> None: ...
    def set_text(self, text: str) -> None: ...
    def get_text(self) -> str: ...
    def set_placeholder_text(self, text: str) -> None: ...
    def set_visibility(self, visible: bool) -> None: ...
    def set_invisible_char(self, ch: str) -> None: ...
    def connect(self, event: str, callback: Callable[..., Any]) -> int: ...

class ToggleButton(Widget):
    def __init__(self) -> None: ...
    def set_label(self, label: str) -> None: ...
    def connect(self, event: str, callback: Callable[..., Any]) -> int: ...
    def get_active(self) -> bool: ...
    def set_active(self, v: bool) -> None: ...

class ComboBoxText(Widget):
    def __init__(self) -> None: ...
    def append_text(self, text: str) -> None: ...
    def set_active(self, index: int) -> None: ...
    def get_active_text(self) -> Optional[str]: ...
    def connect(self, event: str, callback: Callable[..., Any]) -> int: ...

class TreeModel(Protocol):
    ...

class ListStore(TreeModel):
    def __init__(self, *types: type) -> None: ...
    def append(self, row: tuple[object, ...]) -> None: ...
    def __getitem__(self, key: Any) -> Any: ...

class CellRenderer:
    def __init__(self) -> None: ...

class CellRendererText(CellRenderer):
    def __init__(self) -> None: ...

class TreeViewColumn:
    def __init__(self, title: str = "", cell_renderer: CellRenderer | None = None, **kwargs: Any) -> None: ...
    def pack_start(self, cell: CellRenderer, expand: bool) -> None: ...

class TreePath: ...

class TreeView(Widget):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def set_model(self, model: TreeModel | None) -> None: ...
    def get_model(self) -> TreeModel: ...
    def append_column(self, column: TreeViewColumn) -> int: ...
    def connect(self, event: str, callback: Callable[..., Any]) -> int: ...

__all__ = [
    "Widget", "Container", "Bin",
    "Window", "Box", "Frame", "ScrolledWindow",
    "Label", "Entry", "ToggleButton", "ComboBoxText",
    "Orientation", "Align", "PolicyType",
    "TreeModel", "ListStore", "CellRenderer", "CellRendererText",
    "TreeViewColumn", "TreePath", "TreeView",
]