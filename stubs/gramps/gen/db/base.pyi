from __future__ import annotations
from typing import Any, Iterable, Iterator, Optional, Tuple

from gramps.gen.lib.citation import Citation
from gramps.gen.lib.event import Event
from gramps.gen.lib.family import Family
from gramps.gen.lib.person import Person
from gramps.gen.lib.place import Place
from gramps.gen.lib.tag import Tag
from gramps.gen.lib.src import Source
from gramps.gen.lib.repo import Repository
from gramps.gen.lib.note import Note
from gramps.gen.lib.media import Media

class DbReadBase:
    # --- Person ---
    def get_person_from_handle(self, handle: str) -> Optional[Person]: ...
    def add_person(self, person: Person, trans: Any) -> str: ...
    def commit_person(self, person: Person, trans: Any) -> None: ...
    def iter_people(self) -> Iterator[Person]: ...

    # --- Event ---
    def get_event_from_handle(self, handle: str) -> Optional[Event]: ...
    def add_event(self, event: Event, trans: Any) -> str: ...
    def commit_event(self, event: Event, trans: Any) -> None: ...
    def iter_events(self) -> Iterator[Event]: ...

    # --- Family ---
    def get_family_from_handle(self, handle: str) -> Optional[Family]: ...
    def add_family(self, family: Family, trans: Any) -> str: ...
    def commit_family(self, family: Family, trans: Any) -> None: ...
    def iter_families(self) -> Iterator[Family]: ...

    # --- Tag ---
    def get_tag_handles(self) -> Iterable[str]: ...
    def get_tag_from_handle(self, handle: str) -> Optional[Tag]: ...
    def add_tag(self, tag: Tag, trans: Any) -> str: ...
    def commit_tag(self, tag: Tag, trans: Any) -> None: ...
    def iter_tags(self) -> Iterator[Tag]: ...
    def get_number_of_tags(self) -> int: ...

    # --- Citation ---
    def get_citation_from_handle(self, handle: str) -> Optional[Citation]: ...
    def add_citation(self, citation: Citation, trans: Any) -> str: ...
    def commit_citation(self, citation: Citation, trans: Any) -> None: ...
    def iter_citations(self) -> Iterator[Citation]: ...

    # --- Place ---
    def get_place_from_handle(self, handle: str) -> Optional[Place]: ...
    def add_place(self, place: Place, trans: Any) -> str: ...
    def commit_place(self, place: Place, trans: Any) -> None: ...
    def iter_places(self) -> Iterator[Place]: ...

    # --- Source ---
    def get_source_from_handle(self, handle: str) -> Optional[Source]: ...
    def add_source(self, source: Source, trans: Any) -> str: ...
    def commit_source(self, source: Source, trans: Any) -> None: ...
    def iter_sources(self) -> Iterator[Source]: ...

    # --- Repository ---
    def get_repository_from_handle(self, handle: str) -> Optional[Repository]: ...
    def add_repository(self, repository: Repository, trans: Any) -> str: ...
    def commit_repository(self, repository: Repository, trans: Any) -> None: ...
    def iter_repositories(self) -> Iterator[Repository]: ...

    # --- Note ---
    def get_note_from_handle(self, handle: str) -> Optional[Note]: ...
    def add_note(self, note: Note, trans: Any) -> str: ...
    def commit_note(self, note: Note, trans: Any) -> None: ...
    def iter_notes(self) -> Iterator[Note]: ...

    # --- Media ---
    def get_media_from_handle(self, handle: str) -> Optional[Media]: ...
    def add_media(self, media: Media, trans: Any) -> str: ...
    def commit_media(self, media: Media, trans: Any) -> None: ...
    def iter_media(self) -> Iterator[Media]: ...

    # --- Backlinks ---
    def find_backlink_handles(
        self,
        handle: str,
        include_classes: Optional[str] = ...
    ) -> Iterable[Tuple[str, object]]: ...