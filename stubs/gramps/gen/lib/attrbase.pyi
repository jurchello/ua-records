from typing import Any, TYPE_CHECKING

if TYPE_CHECKING:
    from .attribute import Attribute

class AttributeRootBase:
    def __init__(self, source: Any | None = ...) -> None: ...
    def add_attribute(self, attribute: "Attribute") -> None: ...
    def get_attribute_list(self) -> list["Attribute"]: ...
    def remove_attribute(self, attribute: "Attribute") -> bool: ...
    def serialize(self) -> tuple[Any, ...]: ...
    def set_attribute_list(self, attribute_list: list["Attribute"]) -> None: ...
    def unserialize(self, data: tuple[Any, ...]) -> None: ...

class AttributeBase(AttributeRootBase):
    def __init__(self, source: Any | None = ...) -> None: ...

class SrcAttributeBase(AttributeRootBase):
    def __init__(self, source: Any | None = ...) -> None: ...