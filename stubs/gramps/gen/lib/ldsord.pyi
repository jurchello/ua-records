from typing import Any
from .secondaryobj import SecondaryObject
from .citationbase import CitationBase
from .notebase import NoteBase
from .datebase import DateBase
from .placebase import PlaceBase
from .privacybase import PrivacyBase

class LdsOrd(SecondaryObject, CitationBase, NoteBase, DateBase, PlaceBase, PrivacyBase):
    BAPTISM: int
    CONFIRMATION: int
    DEFAULT_STATUS: int
    DEFAULT_TYPE: int
    ENDOWMENT: int
    SEAL_TO_PARENTS: int
    SEAL_TO_SPOUSE: int
    STATUS_BIC: int
    STATUS_CANCELED: int
    STATUS_CHILD: int
    STATUS_CLEARED: int
    STATUS_COMPLETED: int
    STATUS_DNS: int
    STATUS_DNS_CAN: int
    STATUS_INFANT: int
    STATUS_NONE: int
    STATUS_PRE_1970: int
    STATUS_QUALIFIED: int
    STATUS_STILLBORN: int
    STATUS_SUBMITTED: int
    STATUS_UNCLEARED: int

    def __init__(self, source: Any | None = ...) -> None: ...
    def are_equal(self, other: "LdsOrd") -> int: ...
    def get_family_handle(self) -> str: ...
    def get_handle_referents(self) -> list[Any]: ...
    def get_note_child_list(self) -> list[Any]: ...
    def get_referenced_handles(self) -> list[tuple[str, str]]: ...
    @classmethod
    def get_schema(cls) -> dict[str, Any]: ...
    def get_status(self) -> Any: ...
    def get_temple(self) -> str: ...
    def get_text_data_child_list(self) -> list[Any]: ...
    def get_text_data_list(self) -> list[str]: ...
    def get_type(self) -> tuple[int, str]: ...
    def is_empty(self) -> int: ...
    def is_equivalent(self, other: "LdsOrd") -> bool: ...
    def merge(self, acquisition: "LdsOrd") -> None: ...
    def serialize(self, no_text_date: bool = ...) -> tuple[Any, ...]: ...
    def set_family_handle(self, family: str) -> None: ...
    def set_status(self, val: Any) -> None: ...
    def set_status_from_xml(self, xml_str: str) -> bool: ...
    def set_temple(self, temple: str) -> None: ...
    def set_type(self, ord_type: tuple[int, str]) -> None: ...
    def set_type_from_xml(self, xml_str: str) -> bool: ...
    def status2str(self) -> str: ...
    def status2xml(self) -> str: ...
    def type2str(self) -> str: ...
    def type2xml(self) -> str: ...
    def unserialize(self, data: tuple[Any, ...]) -> None: ...