from typing import Any
from typing_extensions import Self
from .secondaryobj import SecondaryObject
from .privacybase import PrivacyBase
from .surnamebase import SurnameBase
from .citationbase import CitationBase
from .notebase import NoteBase
from .datebase import DateBase

class Name(SecondaryObject, PrivacyBase, SurnameBase, CitationBase, NoteBase, DateBase):
    DEF = 0
    LNFN = 1
    FNLN = 2
    PTFN = 3
    FN = 4
    LNFNP = 5
    NAMEFORMATS = (0, 1, 2, 4, 5)

    def __init__(self, source: Any | None = ..., data: Any | None = ...) -> None: ...
    def get_call_name(self) -> str: ...
    def get_display_as(self) -> int: ...
    def get_family_nick_name(self) -> str: ...
    def get_first_name(self) -> str: ...
    def get_gedcom_name(self) -> str: ...
    def get_surname(self) -> str: ...
    def get_surname_list(self) -> list[Any]: ...
    def get_gedcom_parts(self) -> dict[str, str]: ...
    def get_group_as(self) -> str: ...
    def get_group_name(self) -> str: ...
    def get_handle_referents(self) -> list[Any]: ...
    def get_name(self) -> str: ...
    def get_nick_name(self) -> str: ...
    def get_note_child_list(self) -> list[Any]: ...
    def get_referenced_handles(self) -> list[tuple[str, str]]: ...
    def get_regular_name(self) -> str: ...
    @classmethod
    def get_schema(cls) -> dict[str, Any]: ...
    def get_sort_as(self) -> int: ...
    def get_suffix(self) -> str: ...
    def get_text_data_child_list(self) -> list[Any]: ...
    def get_text_data_list(self) -> list[str]: ...
    def get_title(self) -> str: ...
    def get_type(self) -> str: ...
    def get_upper_name(self) -> str: ...
    def is_empty(self) -> bool: ...
    def is_equivalent(self, other: "Name") -> int: ...
    def merge(self, acquisition: Self) -> None: ...
    def serialize(self) -> tuple[Any, ...]: ...
    def set_call_name(self, val: str) -> None: ...
    def set_display_as(self, value: int) -> None: ...
    def set_family_nick_name(self, val: str) -> None: ...
    def set_first_name(self, name: str) -> None: ...
    def set_group_as(self, name: str) -> None: ...
    def set_nick_name(self, val: str) -> None: ...
    def set_sort_as(self, value: int) -> None: ...
    def set_suffix(self, name: str) -> None: ...
    def set_title(self, title: str) -> None: ...
    def set_type(self, the_type: str) -> None: ...
    def unserialize(self, data: tuple[Any, ...]) -> None: ...