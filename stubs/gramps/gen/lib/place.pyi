from typing import Any
from typing_extensions import Self
from .citationbase import CitationBase
from .notebase import NoteBase
from .mediabase import MediaBase
from .urlbase import UrlBase
from .primaryobj import PrimaryObject
from .placename import PlaceName
from .placeref import PlaceRef
from .location import Location
from .placetype import PlaceType

class Place(CitationBase, NoteBase, MediaBase, UrlBase, PrimaryObject):
    def __init__(self, source: Any | None = ...) -> None: ...
    def add_alternate_locations(self, location: Location) -> None: ...
    def add_alternative_name(self, name: str) -> None: ...
    def add_placeref(self, placeref: PlaceRef) -> None: ...
    def get_all_names(self) -> list[PlaceName]: ...
    def get_alternate_locations(self) -> list[Location]: ...
    def get_alternative_names(self) -> list[PlaceName]: ...
    def get_citation_child_list(self) -> list[Any]: ...
    def get_code(self) -> str: ...
    def get_handle_referents(self) -> list[Any]: ...
    def get_latitude(self) -> str: ...
    def get_longitude(self) -> str: ...
    def get_name(self) -> PlaceName: ...
    def get_note_child_list(self) -> list[Any]: ...
    def get_placeref_list(self) -> list[PlaceRef]: ...
    def get_referenced_handles(self) -> list[tuple[str, str]]: ...
    @classmethod
    def get_schema(cls) -> dict[str, Any]: ...
    def get_text_data_child_list(self) -> list[Any]: ...
    def get_text_data_list(self) -> list[str]: ...
    def get_title(self) -> str: ...
    def get_type(self) -> PlaceType: ...
    def merge(self, acquisition: Self) -> None: ...
    def serialize(self) -> tuple[Any, ...]: ...
    def set_alternate_locations(self, location_list: list[Location]) -> None: ...
    def set_alternative_names(self, name_list: list[PlaceName]) -> None: ...
    def set_code(self, code: str) -> None: ...
    def set_latitude(self, latitude: str) -> None: ...
    def set_longitude(self, longitude: str) -> None: ...
    def set_name(self, name: PlaceName) -> None: ...
    def set_placeref_list(self, placeref_list: list[PlaceRef]) -> None: ...
    def set_title(self, title: str) -> None: ...
    def set_type(self, place_type: PlaceType) -> None: ...
    def unserialize(self, data: tuple[Any, ...]) -> None: ...