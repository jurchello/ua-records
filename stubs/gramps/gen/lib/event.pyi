from typing import Any
from .citationbase import CitationBase
from .notebase import NoteBase
from .mediabase import MediaBase
from .attrbase import AttributeBase
from .datebase import DateBase
from .placebase import PlaceBase
from .primaryobj import PrimaryObject

class Event(CitationBase, NoteBase, MediaBase, AttributeBase, DateBase, PlaceBase, PrimaryObject):
    def __init__(self, source: Any | None = ...) -> None: ...
    def are_equal(self, other: "Event") -> bool: ...
    @property
    def description(self) -> str: ...
    @description.setter
    def description(self, value: str) -> None: ...
    def get_citation_child_list(self) -> list[Any]: ...
    def get_description(self) -> str: ...
    def get_handle_referents(self) -> list[Any]: ...
    def get_note_child_list(self) -> list[Any]: ...
    def get_referenced_handles(self) -> list[tuple[str, str]]: ...
    @classmethod
    def get_schema(cls) -> dict[str, Any]: ...
    def get_text_data_child_list(self) -> list[Any]: ...
    def get_text_data_list(self) -> list[str]: ...
    def get_type(self) -> tuple[int, str]: ...
    def is_empty(self) -> bool: ...
    def merge(self, acquisition: PrimaryObject) -> None: ...
    def serialize(self, no_text_date: bool = ...) -> tuple[Any, ...]: ...
    def set_description(self, description: str) -> None: ...
    def set_type(self, the_type: tuple[int, str]) -> None: ...
    @property
    def type(self) -> tuple[int, str]: ...
    @type.setter
    def type(self, the_type: tuple[int, str]) -> None: ...
    def unserialize(self, data: tuple[Any, ...]) -> None: ...