from typing import Any
from typing_extensions import Self
from .secondaryobj import SecondaryObject
from .privacybase import PrivacyBase
from .citationbase import CitationBase
from .notebase import NoteBase
from .datebase import DateBase
from .locationbase import LocationBase

class Address(SecondaryObject, PrivacyBase, CitationBase, NoteBase, DateBase, LocationBase):
    def __init__(self, source: Any | None = ...) -> None: ...
    def get_handle_referents(self) -> list[Any]: ...
    def get_note_child_list(self) -> list[Any]: ...
    def get_referenced_handles(self) -> list[tuple[str, str]]: ...
    @classmethod
    def get_schema(cls) -> dict[str, Any]: ...
    def get_text_data_child_list(self) -> list[Any]: ...
    def get_text_data_list(self) -> list[str]: ...
    def is_equivalent(self, other: "Address") -> bool: ...
    def merge(self, acquisition: Self) -> None: ...
    def serialize(self, no_text_date: bool = ...) -> tuple[Any, ...]: ...
    def unserialize(self, data: tuple[Any, ...]) -> None: ...