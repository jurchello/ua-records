from typing import Any
from .primaryobj import PrimaryObject
from .childref import ChildRef
from .eventref import EventRef

class Family:
    def __init__(self) -> None: ...
    def add_child_ref(self, child_ref: ChildRef) -> None: ...
    def add_event_ref(self, event_ref: EventRef) -> None: ...
    def get_child_ref_list(self) -> list[ChildRef]: ...
    def get_citation_child_list(self) -> list[Any]: ...
    def get_event_list(self) -> list[Any]: ...
    def get_event_ref_list(self) -> list[EventRef]: ...
    def get_father_handle(self) -> str: ...
    def get_handle_referents(self) -> list[Any]: ...
    def get_mother_handle(self) -> str: ...
    def get_note_child_list(self) -> list[Any]: ...
    def get_referenced_handles(self) -> list[tuple[str, str]]: ...
    def get_relationship(self) -> tuple[int, str]: ...
    @classmethod
    def get_schema(cls) -> dict[str, Any]: ...
    def get_text_data_child_list(self) -> list[Any]: ...
    def get_text_data_list(self) -> list[str]: ...
    def merge(self, acquisition: PrimaryObject) -> None: ...
    def remove_child_handle(self, child_handle: str) -> bool: ...
    def remove_child_ref(self, child_ref: ChildRef) -> bool: ...
    def serialize(self) -> tuple[Any, ...]: ...
    def set_child_ref_list(self, child_ref_list: list[ChildRef]) -> None: ...
    def set_event_ref_list(self, event_ref_list: list[EventRef]) -> None: ...
    def set_father_handle(self, person_handle: str) -> None: ...
    def set_mother_handle(self, person_handle: str) -> None: ...
    def set_relationship(self, relationship_type: tuple[int, str]) -> None: ...
    def unserialize(self, data: tuple[Any, ...]) -> None: ...