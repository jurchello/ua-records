from typing import Any
from typing_extensions import Self

class BaseObject:
    @classmethod
    def create(cls, data: tuple[Any, ...]) -> "BaseObject": ...
    def get_handle_referents(self) -> list[Any]: ...
    def get_referenced_handles(self) -> list[tuple[str, str]]: ...
    def get_referenced_handles_recursively(self) -> list[tuple[str, str]]: ...
    def get_text_data_child_list(self) -> list[Any]: ...
    def get_text_data_list(self) -> list[str]: ...
    def matches_regexp(self, pattern: str, case_sensitive: bool = False) -> bool: ...
    def matches_string(self, pattern: str, case_sensitive: bool = False) -> bool: ...
    def merge(self, acquisition: Self) -> None: ...
    def serialize(self) -> tuple[Any, ...]: ...
    def unserialize(self, data: tuple[Any, ...]) -> None: ...