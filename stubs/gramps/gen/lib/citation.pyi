from typing import Any
from typing_extensions import Self
from .mediabase import MediaBase
from .notebase import NoteBase
from .attrbase import SrcAttributeBase
from .citationbase import IndirectCitationBase
from .datebase import DateBase
from .primaryobj import PrimaryObject

class Citation(MediaBase, NoteBase, SrcAttributeBase, IndirectCitationBase, DateBase, PrimaryObject):
    CONF_HIGH: int
    CONF_LOW: int
    CONF_NORMAL: int
    CONF_VERY_HIGH: int
    CONF_VERY_LOW: int

    def __init__(self) -> None: ...
    def get_citation_child_list(self) -> list[Any]: ...
    def get_confidence_level(self) -> int: ...
    def get_handle_referents(self) -> list[Any]: ...
    def get_note_child_list(self) -> list[Any]: ...
    def get_page(self) -> str: ...
    def get_reference_handle(self) -> str: ...
    def get_referenced_handles(self) -> list[tuple[str, str]]: ...
    @classmethod
    def get_schema(cls) -> dict[str, Any]: ...
    def get_text_data_child_list(self) -> list[Any]: ...
    def get_text_data_list(self) -> list[str]: ...
    def merge(self, acquisition: Self) -> None: ...
    def serialize(self, no_text_date: bool = False) -> tuple[Any, ...]: ...
    def set_confidence_level(self, val: int) -> None: ...
    def set_page(self, page: str) -> None: ...
    def set_reference_handle(self, val: str) -> None: ...
    def unserialize(self, data: tuple[Any, ...]) -> None: ...