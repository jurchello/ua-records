from typing import Any
from typing_extensions import Self
from .mediabase import MediaBase
from .notebase import NoteBase
from .attrbase import SrcAttributeBase
from .citationbase import IndirectCitationBase
from .primaryobj import PrimaryObject

class Source(MediaBase, NoteBase, SrcAttributeBase, IndirectCitationBase, PrimaryObject):
    def __init__(self) -> None: ...
    def add_repo_reference(self, repo_ref: Any) -> None: ...
    def get_abbreviation(self) -> str: ...
    def get_author(self) -> str: ...
    def get_citation_child_list(self) -> list[Any]: ...
    def get_handle_referents(self) -> list[Any]: ...
    def get_note_child_list(self) -> list[Any]: ...
    def get_publication_info(self) -> str: ...
    def get_referenced_handles(self) -> list[tuple[str, str]]: ...
    def get_reporef_list(self) -> list[Any]: ...
    @classmethod
    def get_schema(cls) -> dict[str, Any]: ...
    def get_text_data_child_list(self) -> list[Any]: ...
    def get_text_data_list(self) -> list[str]: ...
    def get_title(self) -> str: ...
    def has_repo_reference(self, repo_handle: str) -> bool: ...
    def merge(self, acquisition: Self) -> None: ...
    def remove_repo_references(self, repo_handle_list: list[str]) -> None: ...
    def replace_repo_references(self, old_handle: str, new_handle: str) -> None: ...
    def serialize(self) -> tuple[Any, ...]: ...
    def set_abbreviation(self, abbrev: str) -> None: ...
    def set_author(self, author: str) -> None: ...
    def set_publication_info(self, text: str) -> None: ...
    def set_reporef_list(self, reporef_list: list[Any]) -> None: ...
    def set_title(self, title: str) -> None: ...
    def unserialize(self, data: tuple[Any, ...]) -> None: ...