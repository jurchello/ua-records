from typing import Any

class Date:
    CALENDARS: range
    CAL_GREGORIAN = 0
    CAL_JULIAN = 1
    CAL_HEBREW = 2
    CAL_FRENCH = 3
    CAL_PERSIAN = 4
    CAL_ISLAMIC = 5
    CAL_SWEDISH = 6

    EMPTY = (0, 0, 0, False)

    MOD_NONE = 0
    MOD_BEFORE = 1
    MOD_AFTER = 2
    MOD_ABOUT = 3
    MOD_RANGE = 4
    MOD_SPAN = 5
    MOD_TEXTONLY = 6

    NEWYEAR_JAN1 = 0
    NEWYEAR_MAR1 = 1
    NEWYEAR_MAR25 = 2
    NEWYEAR_SEP1 = 3

    QUAL_NONE = 0
    QUAL_ESTIMATED = 1
    QUAL_CALCULATED = 2

    calendar_names: list[str]
    ui_calendar_names: list[str]

    def __init__(self, *source: Any) -> None: ...
    def convert_calendar(self, calendar: int, known_valid: bool = True) -> "Date": ...
    def copy(self, source: "Date") -> None: ...
    def copy_offset_ymd(self, year: int = 0, month: int = 0, day: int = 0) -> "Date": ...
    def copy_ymd(self, year: int = 0, month: int = 0, day: int = 0, remove_stop_date: Any | None = None) -> "Date": ...
    def get_calendar(self) -> int: ...
    def get_day(self) -> int: ...
    def get_day_valid(self) -> bool: ...
    def get_dmy(self, get_slash: bool = False) -> tuple[int, int, int, Any]: ...
    def get_dow(self) -> int | None: ...
    def get_high_year(self) -> int: ...
    def get_modifier(self) -> int: ...
    def get_month(self) -> int: ...
    def get_month_valid(self) -> bool: ...
    def get_new_year(self) -> int: ...
    def get_quality(self) -> int: ...
    @classmethod
    def get_schema(cls) -> dict[str, Any]: ...
    def get_slash(self) -> bool: ...
    def get_slash2(self) -> bool: ...
    def get_sort_value(self) -> int: ...
    def get_start_date(self) -> tuple[int, int, int, Any]: ...
    def get_start_stop_range(self) -> tuple[tuple[int, int, int], tuple[int, int, int]]: ...
    def get_stop_date(self) -> tuple[int, int, int, Any]: ...
    def get_stop_day(self) -> int: ...
    def get_stop_month(self) -> int: ...
    def get_stop_year(self) -> int: ...
    def get_stop_ymd(self) -> tuple[int, int, int]: ...
    def get_text(self) -> str: ...
    def get_valid(self) -> bool: ...
    def get_year(self) -> int: ...
    def get_year_calendar(self, calendar_name: str | None = None) -> int: ...
    def get_year_valid(self) -> bool: ...
    def get_ymd(self) -> tuple[int, int, int]: ...
    def is_compound(self) -> bool: ...
    def is_empty(self) -> bool: ...
    def is_equal(self, other: "Date") -> int: ...
    def is_full(self) -> bool: ...
    def is_regular(self) -> bool: ...
    def is_valid(self) -> bool: ...
    def lookup_calendar(self, calendar: str) -> int: ...
    def lookup_modifier(self, modifier: str) -> int: ...
    def lookup_quality(self, quality: str) -> int: ...
    def make_vague(self) -> None: ...
    def match(self, other_date: "Date", comparison: str = "=") -> bool: ...
    def match_exact(self, other_date: "Date") -> bool: ...
    @staticmethod
    def newyear_to_code(string: str) -> int: ...
    def newyear_to_str(self) -> str: ...
    def offset(self, value: int) -> tuple[int, int, int]: ...
    def offset_date(self, value: int) -> tuple[int, int, int]: ...
    def recalc_sort_value(self) -> int: ...
    def serialize(self, no_text_date: bool = False) -> tuple[Any, ...]: ...
    def set(self, quality: Any | None = None, modifier: Any | None = None, calendar: Any | None = None,
            value: Any | None = None, text: str | None = None, newyear: Any = 0) -> None: ...
    def set2_yr_mon_day(self, year: int, month: int, day: int) -> None: ...
    def set2_yr_mon_day_offset(self, year: int = 0, month: int = 0, day: int = 0) -> None: ...
    def set_as_text(self, text: str) -> None: ...
    def set_calendar(self, val: int) -> None: ...
    def set_modifier(self, val: int) -> None: ...
    def set_new_year(self, value: Any) -> None: ...
    def set_quality(self, val: int) -> None: ...
    def set_slash(self, value: bool) -> None: ...
    def set_slash2(self, value: bool) -> None: ...
    def set_text_value(self, text: str) -> None: ...
    def set_year(self, year: int) -> None: ...
    def set_yr_mon_day(self, year: int, month: int, day: int, remove_stop_date: Any | None = None) -> None: ...
    def set_yr_mon_day_offset(self, year: int = 0, month: int = 0, day: int = 0) -> None: ...
    def to_calendar(self, calendar_name: str) -> "Date": ...
    def unserialize(self, data: tuple[Any, ...]) -> None: ...
    @property
    def year(self) -> int: ...