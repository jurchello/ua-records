from typing import Any
from .secondaryobj import SecondaryObject
from .privacybase import PrivacyBase
from .notebase import NoteBase
from .refbase import RefBase

class RepoRef(SecondaryObject, PrivacyBase, NoteBase, RefBase):
    def __init__(self, source: Any | None = ...) -> None: ...
    def get_call_number(self) -> str: ...
    def get_media_type(self) -> str: ...
    def get_referenced_handles(self) -> list[tuple[str, str]]: ...
    @classmethod
    def get_schema(cls) -> dict[str, Any]: ...
    def get_text_data_list(self) -> list[str]: ...
    def is_equivalent(self, other: "RepoRef") -> bool: ...
    def merge(self, acquisition: "RepoRef") -> None: ...
    def serialize(self) -> tuple[Any, ...]: ...
    def set_call_number(self, number: str) -> None: ...
    def set_media_type(self, media_type: str) -> None: ...
    def unserialize(self, data: tuple[Any, ...]) -> None: ...