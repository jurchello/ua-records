from typing import Any
from typing_extensions import Self
from .citationbase import CitationBase
from .notebase import NoteBase
from .datebase import DateBase
from .attrbase import AttributeBase
from .primaryobj import PrimaryObject

class Media(CitationBase, NoteBase, DateBase, AttributeBase, PrimaryObject):
    def __init__(self, source: Any | None = ...) -> None: ...
    def get_citation_child_list(self) -> list[Any]: ...
    def get_checksum(self) -> str: ...
    def get_description(self) -> str: ...
    def get_handle_referents(self) -> list[Any]: ...
    def get_mime_type(self) -> str: ...
    def get_note_child_list(self) -> list[Any]: ...
    def get_path(self) -> str: ...
    def get_referenced_handles(self) -> list[tuple[str, str]]: ...
    @classmethod
    def get_schema(cls) -> dict[str, Any]: ...
    def get_text_data_child_list(self) -> list[Any]: ...
    def get_text_data_list(self) -> list[str]: ...
    def merge(self, acquisition: Self) -> None: ...
    def serialize(self) -> tuple[Any, ...]: ...
    def set_checksum(self, checksum: str) -> None: ...
    def set_description(self, description: str) -> None: ...
    def set_mime_type(self, mime_type: str) -> None: ...
    def set_path(self, path: str) -> None: ...
    def unserialize(self, data: tuple[Any, ...]) -> None: ...