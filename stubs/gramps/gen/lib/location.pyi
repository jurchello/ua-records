from typing import Any
from typing_extensions import Self
from .secondaryobj import SecondaryObject
from .locationbase import LocationBase

class Location(SecondaryObject, LocationBase):
    def __init__(self, source: Any | None = ...) -> None: ...
    def get_parish(self) -> str: ...
    @classmethod
    def get_schema(cls) -> dict[str, Any]: ...
    def get_text_data_list(self) -> list[str]: ...
    def is_empty(self) -> bool: ...
    def is_equivalent(self, other: "Location") -> bool: ...
    def merge(self, acquisition: Self) -> None: ...
    def serialize(self) -> tuple[Any, ...]: ...
    def set_parish(self, data: str) -> None: ...
    def unserialize(self, data: tuple[Any, ...]) -> None: ...