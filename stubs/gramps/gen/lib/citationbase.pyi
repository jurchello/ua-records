from typing import Any

class CitationBase:
    def __init__(self, source: Any | None = ...) -> None: ...
    def add_citation(self, handle: str) -> bool: ...
    def get_all_citation_lists(self) -> list[str]: ...
    def get_citation_child_list(self) -> list[Any]: ...
    def get_citation_list(self) -> list[str]: ...
    def get_referenced_citation_handles(self) -> list[tuple[str, str]]: ...
    def has_citation_reference(self, citation_handle: str) -> bool: ...
    def remove_citation_references(self, citation_handle_list: list[str]) -> None: ...
    def replace_citation_references(self, old_handle: str, new_handle: str) -> None: ...
    def serialize(self) -> tuple[Any, ...]: ...
    def set_citation_list(self, citation_list: list[str]) -> None: ...
    def unserialize(self, data: tuple[Any, ...]) -> None: ...

class IndirectCitationBase:
    def __init__(self, source: Any | None = ...) -> None: ...
    def get_citation_child_list(self) -> list[Any]: ...
    def get_citation_list(self) -> list[str]: ...
    def has_citation_reference(self, citation_handle: str) -> bool: ...
    def remove_citation_references(self, citation_handle_list: list[str]) -> None: ...
    def replace_citation_references(self, old_handle: str, new_handle: str) -> None: ...