from typing import Any, TYPE_CHECKING, Self
from .secondaryobj import SecondaryObject
from .privacybase import PrivacyBase

if TYPE_CHECKING:
    from .attrtype import AttributeType

class AttributeRoot(SecondaryObject, PrivacyBase):
    def __init__(self, source: Any | None = ...) -> None: ...
    def get_handle_referents(self) -> list[Any]: ...
    def get_note_child_list(self) -> list[Any]: ...
    def get_referenced_handles(self) -> list[tuple[str, str]]: ...
    def get_text_data_child_list(self) -> list[Any]: ...
    def get_text_data_list(self) -> list[str]: ...
    def get_type(self) -> str: ...
    def get_value(self) -> Any: ...
    def is_equivalent(self, other: Any) -> int: ...
    def merge(self, acquisition: Self) -> None: ...
    def serialize(self) -> tuple[Any, ...]: ...
    def set_type(self, val: "AttributeType | str") -> None: ...
    def set_value(self, val: Any) -> None: ...
    def unserialize(self, data: tuple[Any, ...]) -> None: ...