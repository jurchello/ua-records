from typing import Any
from typing_extensions import Self
from .secondaryobj import SecondaryObject
from .privacybase import PrivacyBase
from .citationbase import CitationBase
from .notebase import NoteBase
from .refbase import RefBase
from .attrbase import AttributeBase

class MediaRef(SecondaryObject, PrivacyBase, CitationBase, NoteBase, RefBase, AttributeBase):
    def __init__(self, source: Any | None = ...) -> None: ...
    def get_citation_child_list(self) -> list[Any]: ...
    def get_handle_referents(self) -> list[Any]: ...
    def get_note_child_list(self) -> list[Any]: ...
    def get_rectangle(self) -> Any: ...
    def get_referenced_handles(self) -> list[tuple[str, str]]: ...
    @classmethod
    def get_schema(cls) -> dict[str, Any]: ...
    def get_text_data_child_list(self) -> list[Any]: ...
    def is_equivalent(self, other: Self) -> bool: ...
    def merge(self, acquisition: Self) -> None: ...
    def serialize(self) -> tuple[Any, ...]: ...
    def set_rectangle(self, coord: Any) -> None: ...
    def unserialize(self, data: tuple[Any, ...]) -> None: ...