from typing import Any
from .notebase import NoteBase
from .addressbase import AddressBase
from .urlbase import UrlBase
from .citationbase import IndirectCitationBase
from .primaryobj import PrimaryObject

class Repository(NoteBase, AddressBase, UrlBase, IndirectCitationBase, PrimaryObject):
    def __init__(self) -> None: ...
    def get_citation_child_list(self) -> list[Any]: ...
    def get_handle_referents(self) -> list[Any]: ...
    def get_name(self) -> str: ...
    def get_note_child_list(self) -> list[Any]: ...
    def get_referenced_handles(self) -> list[tuple[str, str]]: ...
    @classmethod
    def get_schema(cls) -> dict[str, Any]: ...
    def get_text_data_child_list(self) -> list[Any]: ...
    def get_text_data_list(self) -> list[str]: ...
    def get_type(self) -> str: ...
    def merge(self, acquisition: PrimaryObject) -> None: ...
    def serialize(self) -> tuple[Any, ...]: ...
    def set_name(self, name: str) -> None: ...
    def set_type(self, the_type: str) -> None: ...
    def unserialize(self, data: tuple[Any, ...]) -> None: ...