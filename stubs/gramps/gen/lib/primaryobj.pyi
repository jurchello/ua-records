from typing import Any
from typing_extensions import Self
from .tableobj import TableObject
from .privacybase import PrivacyBase
from .tagbase import TagBase

class BasicPrimaryObject(TableObject, PrivacyBase, TagBase):
    gramps_id: str

    def __init__(self, source: Any | None = ...) -> None: ...
    def get_gramps_id(self) -> str: ...
    def has_citation_reference(self, handle: str) -> bool: ...
    def has_handle_reference(self, classname: str, handle: str) -> bool: ...
    def has_media_reference(self, handle: str) -> bool: ...
    def remove_citation_references(self, handle_list: list[str]) -> None: ...
    def remove_handle_references(self, classname: str, handle_list: list[str]) -> None: ...
    def remove_media_references(self, handle_list: list[str]) -> None: ...
    def replace_citation_references(self, old_handle: str, new_handle: str) -> None: ...
    def replace_handle_reference(self, classname: str, old_handle: str, new_handle: str) -> None: ...
    def replace_media_references(self, old_handle: str, new_handle: str) -> None: ...
    def serialize(self) -> tuple[Any, ...]: ...
    def set_gramps_id(self, gramps_id: str) -> None: ...
    def unserialize(self, data: tuple[Any, ...]) -> None: ...

class PrimaryObject(BasicPrimaryObject):
    def __init__(self, source: Any | None = ...) -> None: ...
    def has_handle_reference(self, classname: str, handle: str) -> bool: ...
    def remove_handle_references(self, classname: str, handle_list: list[str]) -> None: ...
    def replace_handle_reference(self, classname: str, old_handle: str, new_handle: str) -> None: ...