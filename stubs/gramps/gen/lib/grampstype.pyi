from typing import Any

class GrampsTypeMeta(type):
    def __new__(cls, name: str, bases: tuple[type, ...], namespace: dict[str, Any]) -> "GrampsTypeMeta": ...

class GrampsType(metaclass=GrampsTypeMeta):
    POS_VALUE = 0
    POS_STRING = 1
    _CUSTOM: int
    _DEFAULT: int
    _DATAMAP: list[tuple[int, str, str]]
    _BLACKLIST: list[int]

    value: int
    string: str

    def __init__(self, value: Any | None = ...) -> None: ...
    def get_custom(self) -> int: ...
    def get_map(self) -> list[tuple[int, str, str]]: ...
    def get_menu(self) -> list[str]: ...
    def get_menu_standard_xml(self) -> list[str]: ...
    @classmethod
    def get_schema(cls) -> dict[str, Any]: ...
    def get_standard_names(self) -> list[str]: ...
    def get_standard_xml(self) -> list[str]: ...
    def is_custom(self) -> bool: ...
    def is_default(self) -> bool: ...
    def serialize(self) -> tuple[Any, ...]: ...
    def set(self, value: Any) -> None: ...
    def set_from_xml_str(self, value: str) -> None: ...
    def unserialize(self, data: tuple[Any, ...]) -> None: ...
    def xml_str(self) -> str: ...